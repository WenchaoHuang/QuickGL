/*************************************************************************
***********************    QuickGL_Framebuffer    ************************
*************************************************************************/
#pragma once

#include "TextureCube.h"

namespace QuickGL
{
	/*********************************************************************
	***********************    glAttachmentSlot    ***********************
	*********************************************************************/

	/**
	 *	@brief	Slots for framebuffer attachment.
	 */
	enum class glAttachmentSlot : uint32_t
	{
		eDepth				= 0x8D00,
		eColor0				= 0x8CE0,
		eColor1				= 0x8CE1,
		eColor2				= 0x8CE2,
		eColor3				= 0x8CE3,
		eColor4				= 0x8CE4,
		eColor5				= 0x8CE5,
		eColor6				= 0x8CE6,
		eColor7				= 0x8CE7,
		eStencil			= 0x8D20,
		eDepthStencil		= 0x821A
	};

	/*********************************************************************
	************************    glFramebuffer    *************************
	*********************************************************************/

	/**
	 *	@brief	OpenGL framebuffer object, which generated by user.
	 */
	class QGLAPI glFramebuffer : public glResource
	{

	public:

		//!	@brief	Create framebuffer object.
		glFramebuffer();

		//!	@brief	Destroy framebuffer object.
		~glFramebuffer();

	public:

		//!	@brief	Set the viewport.
		static void Viewport(glOffset2D offset, glExtent2D extent);

		//!	@brief	Enable and disable writing of frame buffer color components.
		static void ColorWriteMask(bool red, bool green, bool blue, bool alpha);

		//!	@brief	Specify clear values for the color buffers.
		static void ClearColor(float red, float green, float blue, float alpha);

		//!	@brief	Specify the clear value [0, 1] for the depth buffer.
		static void ClearDepth(float depth = 1.0f);

		//!	@brief	Specify the clear value for the stencil buffer.
		static void ClearStencil(int value = 0);

	public:

		//!	@brief	Check the completeness status of the framebuffer.
		bool IsCompleted() const;

		//!	@brief	Specify the clear value for the depth buffer.
		void SetClearDepth(double depth);

		//!	@brief	Specify the clear value for the stencil buffer.
		void SetClearStencil(int stencil);

		//!	@brief	Enable and disable buffers clearing.
		void SetClearMask(bool color, bool depth, bool stencil);

		//!	@brief	Specify the clear values for the color buffers.
		void SetClearColor(float red, float green, float blue, float alpha);

		//!	@brief	Attach a renderbuffer object to the framebuffer.
		bool Attach(glAttachmentSlot eSlot, const glRenderbuffer * pRenderbuffer);

		//!	@brief	Attach a texture image to the framebuffer.
		bool Attach(glAttachmentSlot eSlot, const glTexture2D * pTexture2D, int level = 0);

		//!	@brief	Attach a multi-sample texture image to the framebuffer.
		bool Attach(glAttachmentSlot eSlot, const glTexture2DMS * pTexture2DMS, int level = 0);

		//!	@brief	Attach one face of cube image to the framebuffer.
		bool Attach(glAttachmentSlot eSlot, const glTextureCube * pCubeMap, glCubeFace eFace, int level = 0);

		//!	@brief	Copy a block of color pixels from one framebuffer object to another.
		bool BlitColorFrom(const glFramebuffer * pSrcFBO, glOffset2D srcOffset, glOffset2D dstOffset, glExtent2D extent);

		//!	@brief	Copy a block of color pixels from default framebuffer to the framebuffer.
		bool BlitColorFromFramebuffer0(glOffset2D srcOffset, glOffset2D dstOffset, glExtent2D extent);

		//!	@brief	Copy a block of color pixels from the framebuffer to default framebuffer.
		bool BlitColorToFramebuffer0(glOffset2D srcOffset, glOffset2D dstOffset, glExtent2D extent);

		//!	@brief	Detach object from the framebuffer.
		void Detach(glAttachmentSlot eSlot);

		//!	@brief	Begin renderpass.
		void BeginRenderPass();

		//!	@brief	End renderpass.
		void EndRenderPass();

		//!	@brief	Detach all attachments.
		void Reset();

	public:

		int				m_ClearStencil;
		float			m_ClearColor[4];
		double			m_ClearDepth;
		uint32_t		m_ClearMask;
	};
}